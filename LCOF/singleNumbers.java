// 找出数组中2个出现次数为1的数字a和b，其余数字都出现2次

// 如果是简单问题，在一个数组中找出唯一出现1次的1个数字，用全体异或的方式可以得到
// 在这个问题中，可以把1个数的问题扩展到2个数，但是要通过分组将这些数字分成2组，其中目标a和b要分到不同的组，相同的数字分到同一个组
// 异或的意义是表示两个数的二进制位中哪些位是不同的，所以可以通过a和b异或的结果来分组，根据异或结果中的来生成mask，mask只有1个位置是1，这样就能分开了

class Solution {
    public int[] singleNumbers(int[] nums) {
        // 要将两个目标数字分组，需要找出他们不同的位置
        int m = 0;
        // 全部异或，得到目标a和b的异或结果
        for(int num : nums){
            m ^= num;
        }
        // m的二进制表示中为1的位，就是a和b不同的地方，用这个位来将原数组分组
        // 如a = 6, b = 3, a ^ b = 101, 要找的最低位mask是001, 则这一位可以将ab分开
        // 获取最低位的mask，从1开始用移位的方式获取
        int mask = 1;
        while((mask & m) == 0){
            mask = mask << 1;
        }
        // 分组异或
        // 因为重复的数字肯定在同一组，所以用这个mask可以把全部数字分开
        int a = 0;
        int b = 0;
        for(int num : nums){
            // 第一组
            if((num & mask) == 0){
                a ^= num;
            }
            // 另一组
            else {
                b ^= num;
            }
        }
        return new int[] {a, b};
    }
}
