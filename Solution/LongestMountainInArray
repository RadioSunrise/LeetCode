// site: https://leetcode-cn.com/problems/longest-mountain-in-array/

// 数组中找最长的山脉

// 第一种，类似动态规划的方法，枚举山顶位置
// 先要统计出每个位置向左和向右能延伸多长，最后再比较最大值，注意要满足山脉的条件，即左右延伸都要大于0的才行
class Solution {
    public int longestMountain(int[] A) {
        // 记录往左延伸和往右延伸的长度，枚举山顶的方法
        int n = A.length;
        int[] left = new int[n];
        int[] right = new int[n];
        // 统计左边
        for(int i = 1; i < n; i++){
            if(A[i - 1] < A[i]){
                left[i] = left[i - 1] + 1;
            }
            else {
                left[i] = 0;
            }
        }
        // 统计右边
        for(int i = n - 2; i >= 0; i--){
            if(A[i] > A[i + 1]){
                right[i] = right[i + 1] + 1;
            }
            else {
                right[i] = 0;
            }
        }
        int res = 0;
        for(int i = 0; i < n; i++){
            // 还有加上left[i] 和 right[i] 都要大于0的条件，这样才能算山峰
            if(left[i] > 0 && right[i] > 0){
                res = Math.max(res, left[i] + right[i] + 1);
            }
        }
        return res;
    }
}

// 第二种，枚举山脚的方法
