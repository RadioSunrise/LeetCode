package leetcode;

import java.util.*;

/**
 * 四数之和
 * 给定一个包含n个整数的数组nums和一个目标值target，判断nums中是否存在四个元素 a，b，c和 d
 * 使得a + b + c + d的值与target相等？找出所有满足条件且不重复的四元组。
 *
 * 注意：答案中不可以包含重复的四元组。
 */
public class FourSum {
    /**
     * 回溯法，很慢
     * @param nums
     * @param target
     * @return
     */
    public List<List<Integer>> fourSumBackTrack(int[] nums, int target) {
        List<List<Integer>> res = new LinkedList<>();
        Deque<Integer> path = new ArrayDeque<>();
        if(nums.length < 4){
            return res;
        }
        // 排序，剪枝
        Arrays.sort(nums);
        dfs(0, nums, target, path, res);
        return res;
    }

    /**
     * dfs 回溯
     * @param begin 从begin开始，防止重复
     * @param nums
     * @param target
     * @param path
     * @param res
     */
    public void dfs(int begin, int[] nums, int target, Deque<Integer> path, List<List<Integer>> res){
        // 结束条件，只要等于4个都会return的
        if(path.size() == 4){
            if(target == 0){
                res.add(new LinkedList<>(path));
            }
            // 剩余target不等于0也会return
            return;
        }
        // begin太大或者剩下的数字不够
        if(begin >= nums.length || ((4 - path.size()) > (nums.length - begin))){
            return;
        }
        for(int i = begin; i < nums.length; i++){
            // i要大于begin，因为控制的是本层的选择
            if(i > begin && (nums[i] == nums[i - 1])){
                continue;
            }
            // 已经排好序了，如果当前nums[i]>0其大于target，那么后续的数都不能加入结果集
            if(nums[i] >= 0 && nums[i] > target){
                System.out.println("bigger");
                return;
            }
            path.addLast(nums[i]);
            // 下一轮从i+1开始
            dfs(i + 1, nums, target - nums[i], path, res);
            path.removeLast();
        }
    }
    public static void main(String[] args){
        int[] nums = new int[]{1,-2,-5,-4,-3,3,3,5};
        FourSum solution = new FourSum();
        List<List<Integer>> res = solution.fourSumBackTrack(nums, -11);
        System.out.println(res.toString());
    }
}
