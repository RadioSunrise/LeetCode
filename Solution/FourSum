package leetcode;

import java.util.*;

/**
 * 四数之和
 * 给定一个包含n个整数的数组nums和一个目标值target，判断nums中是否存在四个元素 a，b，c和 d
 * 使得a + b + c + d的值与target相等？找出所有满足条件且不重复的四元组。
 *
 * 注意：答案中不可以包含重复的四元组。
 */
public class FourSum {
    /**
     * 回溯法
     * @param nums
     * @param target
     * @return
     */
    public List<List<Integer>> fourSumBackTrack(int[] nums, int target) {
        List<List<Integer>> res = new LinkedList<>();
        Deque<Integer> path = new ArrayDeque<>();
        if(nums.length < 4){
            return res;
        }
        // 排序，剪枝
        Arrays.sort(nums);
        dfs(0, nums, 0, target, path, res);
        return res;
    }

    /**
     * dfs 回溯
     * @param begin 从begin开始，防止重复
     * @param nums
     * @param sum 当前path中的累加值
     * @param target
     * @param path
     * @param res
     */
    public void dfs(int begin, int[] nums, int sum, int target, Deque<Integer> path, List<List<Integer>> res){
        // 结束条件，只要等于4个都会return的
        if(path.size() == 4){
            if(sum == target){
                res.add(new LinkedList<>(path));
            }
            // 剩余target不等于0也会return
            return;
        }

        for(int i = begin; i < nums.length; i++){
            // 剪枝1，剩下的数字不够
            if((4 - path.size()) > (nums.length - begin)){
                return;
            }
            // 去重，i要大于begin，因为控制的是本层的选择，
            if(i > begin && (nums[i] == nums[i - 1])){
                continue;
            }

            // 根据数值大小进行的剪枝
            // 剩下中最大和最小是已知的，即nums[i + 1]和nums[n - 1]，选完这个数字之和，考虑两种情况
            // 1.剩下的数字加起来都不够target，则这个数字不够大，要选一个大一点的，即往后跳
            if(i < nums.length - 1 && sum + nums[i] + (3 - path.size()) * nums[nums.length - 1] < target) {
                continue;
            }
            // 2.之后的数字选够4个之后，最小都会比target大，则后续都不可能符合，直接return
            if(i < nums.length - 1 && sum + nums[i] + (3 - path.size()) * nums[i + 1] > target){
                return;
            }

            path.addLast(nums[i]);
            // 下一轮从i+1开始，累计值sum传下去
            dfs(i + 1, nums, sum + nums[i], target, path, res);
            path.removeLast();
        }
    }
    
    /**
     * 双指针法，从三数之和改过来的
     * @param nums
     * @param target
     * @return
     */
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res = new LinkedList<>();
        if(nums.length < 4){
            return res;
        }
        // 排序
        Arrays.sort(nums);
        int n = nums.length;
        // 两重循环枚举两个数，用双指针枚举剩下的两个数
        // first loop
        for(int i = 0; i < n - 3; i++){
            // 去重
            if (i > 0 && nums[i] == nums[i - 1]){
                continue;
            }
            // 连续4个都太大了，直接break
            if(nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target){
                break;
            }
            // 当前数加上最大的三个都太小，移动到下一个
            if(nums[i] + nums[n - 1] + nums[n - 2] + nums[n - 3] < target){
                continue;
            }
            // second loop
            for(int j = i + 1; j < n - 2; j++){
                // 去重
                if(j > i + 1 && nums[j] == nums[j - 1]){
                    continue;
                }
                if(nums[i] + nums[j] + nums[j + 1] + nums[j + 2] > target){
                    break;
                }
                if(nums[i] + nums[j] + nums[n - 1] + nums[n - 2] < target){
                    continue;
                }
                // 双指针代替最后两重循环
                int left = j + 1;
                int right = n - 1;
                while(left < right){
                    int sum = nums[i] + nums[j] + nums[left] + nums[right];
                    if(sum ==  target){
                        res.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));
                        // 找到一组解也要继续移动
                        while (left < right && nums[left] == nums[left + 1]){
                            left++;
                        }
                        // while退出的时候left还是指着一个相同的值，要再移动一次
                        left++;
                        while (left < right && nums[right] == nums[right - 1]){
                            right--;
                        }
                        right--;
                    }
                    else if(sum < target){
                        while (left < right && nums[left] == nums[left + 1]){
                            left++;
                        }
                        left++;
                    }
                    else {
                        while (left < right && nums[right] == nums[right - 1]){
                            right--;
                        }
                        right--;
                    }
                }
            }
        }
        return res;
    }
    public static void main(String[] args){
        int[] nums = new int[]{1,-2,-5,-4,-3,3,3,5};
        FourSum solution = new FourSum();
        List<List<Integer>> res = solution.fourSum(nums, -11);
        System.out.println(res.toString());
    }
}
